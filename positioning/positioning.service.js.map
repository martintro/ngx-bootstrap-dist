{"version":3,"sources":["../../.tmp/positioning/positioning.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAY,UAAA,EAAW,MAAO,eAAA,CAAgB;AACvD,OAAO,EAAE,gBAAA,EAAiB,MAAO,kBAAA,CAAmB;AAoCpD;IAAA;IAiBA,CAAC;IAhBC,qCAAQ,GAAR,UAAS,OAA2B;QAC3B,IAAA,yBAAO,EAAE,uBAAM,EAAE,+BAAU,EAAE,mCAAY,CAAY;QAC5D,gBAAgB,CACd,eAAe,CAAC,MAAM,CAAC,EACvB,eAAe,CAAC,OAAO,CAAC,EACxB,UAAU,EACV,YAAY,CACb,CAAC;IACJ,CAAC;IAEI,6BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,iCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,yBAAC;CAjBD,AAiBC,IAAA;SAjBY,kBAAkB;AAmB/B,yBANyB,OAAoC;IAO3D,kCAAkC;IAClC,EAAE,CAAC,CAAC,OANO,OAAA,KAAY,QAAA,CAAS,CAAC,CAAA;QAO/B,MAAM,CANC,QAAA,CAAS,aAAC,CAAa,OAAC,CAAW,CAAY;IAOxD,CAAC;IAED,EAAE,CAAC,CAAC,OANC,YAAkB,UAAA,CAAW,CAAC,CAAA;QAOjC,MAAM,CANC,OAAA,CAAQ,aAAC,CAAa;IAO/B,CAAC;IAED,MAAM,CANC,OAAW,CAAY;AAOhC,CAAC","file":"positioning.service.js","sourceRoot":"","sourcesContent":["import { Injectable, ElementRef } from '@angular/core';\r\nimport { positionElements } from './ng-positioning';\r\n\r\nexport interface PositioningOptions {\r\n  /** The DOM element, ElementRef, or a selector string of an element which will be moved */\r\n  element?: HTMLElement | ElementRef | string;\r\n\r\n  /** The DOM element, ElementRef, or a selector string of an element which the element will be attached to  */\r\n  target?: HTMLElement | ElementRef | string;\r\n\r\n  /**\r\n   * A string of the form 'vert-attachment horiz-attachment' or 'placement'\r\n   * - placement can be \"top\", \"bottom\", \"left\", \"right\"\r\n   * not yet supported:\r\n   * - vert-attachment can be any of 'top', 'middle', 'bottom'\r\n   * - horiz-attachment can be any of 'left', 'center', 'right'\r\n   */\r\n  attachment?: string;\r\n\r\n  /** A string similar to `attachment`. The one difference is that, if it's not provided,\r\n   * `targetAttachment` will assume the mirror image of `attachment`.\r\n   */\r\n  targetAttachment?: string;\r\n\r\n  /** A string of the form 'vert-offset horiz-offset'\r\n   * - vert-offset and horiz-offset can be of the form \"20px\" or \"55%\"\r\n   */\r\n  offset?: string;\r\n\r\n  /** A string similar to `offset`, but referring to the offset of the target */\r\n  targetOffset?: string;\r\n\r\n  /** If true component will be attached to body */\r\n  appendToBody?: boolean;\r\n}\r\n\r\n\r\nexport class PositioningService {\r\n  position(options: PositioningOptions): void {\r\n    const {element, target, attachment, appendToBody} = options;\r\n    positionElements(\r\n      _getHtmlElement(target),\r\n      _getHtmlElement(element),\r\n      attachment,\r\n      appendToBody\r\n    );\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\r\nfunction _getHtmlElement(element: HTMLElement | ElementRef | string): HTMLElement {\r\n  // it means that we got a selector\r\n  if (typeof element === 'string') {\r\n    return document.querySelector(element) as HTMLElement;\r\n  }\r\n\r\n  if (element instanceof ElementRef) {\r\n    return element.nativeElement;\r\n  }\r\n\r\n  return element as HTMLElement;\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}