{"version":3,"sources":["../../../.tmp/chronos/units/month.ts"],"names":[],"mappings":"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","file":"month.js","sourceRoot":"","sourcesContent":["import { addFormatToken } from '../format/format';\r\nimport { isLeapYear } from './year';\r\nimport { mod } from '../utils';\r\nimport { getMonth } from '../utils/date-getters';\r\nimport { addRegexToken, match1to2, match2 } from '../parse/regex';\r\nimport { addParseToken } from '../parse/token';\r\nimport { MONTH } from './constants';\r\nimport { toInt } from '../utils/type-checks';\r\nimport { addUnitPriority } from './priorities';\r\nimport { addUnitAlias } from './aliases';\r\nimport { getParsingFlags } from '../create/parsing-flags';\r\nimport { DateParsingConfig } from '../create/parsing.types';\r\nimport { DateArray, DateFormatterOptions } from '../types';\r\n\r\n// todo: this is duplicate, source in date-getters.ts\r\nexport function daysInMonth(year: number, month: number): number {\r\n  if (isNaN(year) || isNaN(month)) {\r\n    return NaN;\r\n  }\r\n  const modMonth = mod(month, 12);\r\n  const _year = year + (month - modMonth) / 12;\r\n\r\n  return modMonth === 1\r\n    ? isLeapYear(_year) ? 29 : 28\r\n    : (31 - modMonth % 7 % 2);\r\n}\r\n\r\n// FORMATTING\r\n\r\naddFormatToken('M', ['MM', 2, false], 'Mo',\r\n  function (date: Date, opts: DateFormatterOptions): string {\r\n    return (getMonth(date, opts.isUTC) + 1).toString(10);\r\n  });\r\n\r\naddFormatToken('MMM', null, null,\r\n  function (date: Date, opts: DateFormatterOptions): string {\r\n    return opts.locale.monthsShort(date, opts.format, opts.isUTC);\r\n  });\r\n\r\naddFormatToken('MMMM', null, null,\r\n  function (date: Date, opts: DateFormatterOptions): string {\r\n    return opts.locale.months(date, opts.format, opts.isUTC);\r\n  });\r\n\r\n\r\n// ALIASES\r\n\r\naddUnitAlias('month', 'M');\r\n\r\n// PRIORITY\r\n\r\naddUnitPriority('month', 8);\r\n\r\n// PARSING\r\n\r\naddRegexToken('M', match1to2);\r\naddRegexToken('MM', match1to2, match2);\r\naddRegexToken('MMM', function (isStrict, locale) {\r\n  return locale.monthsShortRegex(isStrict);\r\n});\r\naddRegexToken('MMMM', function (isStrict, locale) {\r\n  return locale.monthsRegex(isStrict);\r\n});\r\n\r\naddParseToken(['M', 'MM'], function (input: string, array: DateArray, config: DateParsingConfig): DateParsingConfig {\r\n  array[MONTH] = toInt(input) - 1;\r\n\r\n  return config;\r\n});\r\n\r\naddParseToken(['MMM', 'MMMM'],\r\n  function (input: string, array: DateArray, config: DateParsingConfig, token: string): DateParsingConfig {\r\n    const month = config._locale.monthsParse(input, token, config._strict);\r\n    // if we didn't find a month name, mark the date as invalid.\r\n    if (month != null) {\r\n      array[MONTH] = month;\r\n    } else {\r\n      getParsingFlags(config).invalidMonth = !!input;\r\n    }\r\n\r\n    return config;\r\n  });\r\n\r\n"]}