{"version":3,"sources":["../../../.tmp/chronos/units/quarter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,aAAa,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACvD,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAC/C,OAAO,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AACpC,OAAO,EAAE,KAAK,EAAE,MAAM,sBAAsB,CAAC;AAC7C,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AAEjD,OAAO,EAAE,eAAe,EAAE,MAAM,cAAc,CAAC;AAC/C,OAAO,EAAE,YAAY,EAAE,MAAM,WAAW,CAAC;AAEzC,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AAEjD,aAAa;AAEb,cAAc,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAC5B,UAAU,IAAU,EAAE,IAA0B;IAC9C,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC;AAEL,UAAU;AAEV,YAAY,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;AAE7B,WAAW;AAEX,eAAe,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;AAE9B,UAAU;AAEV,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AAC3B,aAAa,CAAC,GAAG,EAAE,UAAU,KAAa,EAAE,KAAgB,EAAE,MAAyB;IACrF,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IAEtC,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC,CAAC,CAAC;AAEH,UAAU;AAEV,MAAM,qBAAqB,IAAU,EAAE,KAAa;IAAb,sBAAA,EAAA,aAAa;IAClD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACpD,CAAC;AAED,MAAM,qBAAqB,IAAU,EAAE,OAAe,EAAE,KAAe;IACrE,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;AAC9E,CAAC;AAED,yCAAyC;AACzC,yBAAyB;AACzB,0CAA0C;AAC1C,wDAAwD;AACxD,IAAI","file":"quarter.js","sourceRoot":"","sourcesContent":["import { addFormatToken } from '../format/format';\r\nimport { addRegexToken, match1 } from '../parse/regex';\r\nimport { addParseToken } from '../parse/token';\r\nimport { MONTH } from './constants';\r\nimport { toInt } from '../utils/type-checks';\r\nimport { getMonth } from '../utils/date-getters';\r\nimport { DateArray, DateFormatterOptions } from '../types';\r\nimport { addUnitPriority } from './priorities';\r\nimport { addUnitAlias } from './aliases';\r\nimport { DateParsingConfig } from '../create/parsing.types';\r\nimport { setMonth } from '../utils/date-setters';\r\n\r\n// FORMATTING\r\n\r\naddFormatToken('Q', null, 'Qo',\r\n  function (date: Date, opts: DateFormatterOptions): string {\r\n    return getQuarter(date, opts.isUTC).toString(10);\r\n  });\r\n\r\n// ALIASES\r\n\r\naddUnitAlias('quarter', 'Q');\r\n\r\n// PRIORITY\r\n\r\naddUnitPriority('quarter', 7);\r\n\r\n// PARSING\r\n\r\naddRegexToken('Q', match1);\r\naddParseToken('Q', function (input: string, array: DateArray, config: DateParsingConfig): DateParsingConfig {\r\n  array[MONTH] = (toInt(input) - 1) * 3;\r\n\r\n  return config;\r\n});\r\n\r\n// MOMENTS\r\n\r\nexport function getQuarter(date: Date, isUTC = false): number {\r\n  return Math.ceil((getMonth(date, isUTC) + 1) / 3);\r\n}\r\n\r\nexport function setQuarter(date: Date, quarter: number, isUTC?: boolean): Date {\r\n  return setMonth(date, (quarter - 1) * 3 + getMonth(date, isUTC) % 3, isUTC);\r\n}\r\n\r\n// export function getSetQuarter(input) {\r\n//   return input == null\r\n//     ? Math.ceil((this.month() + 1) / 3)\r\n//     : this.month((input - 1) * 3 + this.month() % 3);\r\n// }\r\n"]}