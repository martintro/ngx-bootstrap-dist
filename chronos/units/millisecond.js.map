{"version":3,"sources":["../../../.tmp/chronos/units/millisecond.ts"],"names":[],"mappings":"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","file":"millisecond.js","sourceRoot":"","sourcesContent":["// tslint:disable:no-bitwise\r\n// FORMATTING\r\n\r\nimport { addFormatToken } from '../format/format';\r\nimport { addRegexToken, match1, match1to3, match2, match3, matchUnsigned } from '../parse/regex';\r\nimport { MILLISECOND } from './constants';\r\nimport { toInt } from '../utils/type-checks';\r\nimport { addParseToken } from '../parse/token';\r\nimport { DateArray, DateFormatterOptions, WeekParsing } from '../types';\r\nimport { addUnitAlias } from './aliases';\r\nimport { addUnitPriority } from './priorities';\r\nimport { DateParsingConfig } from '../create/parsing.types';\r\nimport { getMilliseconds } from '../utils/date-getters';\r\n\r\naddFormatToken('S', null, null,\r\n  function (date: Date, opts: DateFormatterOptions): string {\r\n    return (~~(getMilliseconds(date, opts.isUTC) / 100)).toString(10);\r\n  });\r\n\r\naddFormatToken(null, ['SS', 2, false], null,\r\n  function (date: Date, opts: DateFormatterOptions): string {\r\n    return (~~(getMilliseconds(date, opts.isUTC) / 10)).toString(10);\r\n  });\r\n\r\naddFormatToken(null, ['SSS', 3, false], null,\r\n  function (date: Date, opts: DateFormatterOptions): string {\r\n    return (getMilliseconds(date, opts.isUTC)).toString(10);\r\n  });\r\naddFormatToken(null, ['SSSS', 4, false], null,\r\n  function (date: Date, opts: DateFormatterOptions): string {\r\n    return (getMilliseconds(date, opts.isUTC) * 10).toString(10);\r\n  });\r\naddFormatToken(null, ['SSSSS', 5, false], null,\r\n  function (date: Date, opts: DateFormatterOptions): string {\r\n    return (getMilliseconds(date, opts.isUTC) * 100).toString(10);\r\n  });\r\naddFormatToken(null, ['SSSSSS', 6, false], null,\r\n  function (date: Date, opts: DateFormatterOptions): string {\r\n    return (getMilliseconds(date, opts.isUTC) * 1000).toString(10);\r\n  });\r\naddFormatToken(null, ['SSSSSSS', 7, false], null,\r\n  function (date: Date, opts: DateFormatterOptions): string {\r\n    return (getMilliseconds(date, opts.isUTC) * 10000).toString(10);\r\n  });\r\naddFormatToken(null, ['SSSSSSSS', 8, false], null,\r\n  function (date: Date, opts: DateFormatterOptions): string {\r\n    return (getMilliseconds(date, opts.isUTC) * 100000).toString(10);\r\n  });\r\naddFormatToken(null, ['SSSSSSSSS', 9, false], null,\r\n  function (date: Date, opts: DateFormatterOptions): string {\r\n    return (getMilliseconds(date, opts.isUTC) * 1000000).toString(10);\r\n  });\r\n\r\n\r\n// ALIASES\r\n\r\naddUnitAlias('millisecond', 'ms');\r\n\r\n// PRIORITY\r\n\r\naddUnitPriority('millisecond', 16);\r\n\r\n// PARSING\r\n\r\naddRegexToken('S', match1to3, match1);\r\naddRegexToken('SS', match1to3, match2);\r\naddRegexToken('SSS', match1to3, match3);\r\n\r\nlet token;\r\nfor (token = 'SSSS'; token.length <= 9; token += 'S') {\r\n  addRegexToken(token, matchUnsigned);\r\n}\r\n\r\nfunction parseMs(input: string, array: DateArray, config: DateParsingConfig): DateParsingConfig {\r\n  array[MILLISECOND] = toInt(parseFloat(`0.${input}`) * 1000);\r\n\r\n  return config;\r\n}\r\n\r\nfor (token = 'S'; token.length <= 9; token += 'S') {\r\n  addParseToken(token, parseMs);\r\n}\r\n// MOMENTS\r\n\r\n"]}