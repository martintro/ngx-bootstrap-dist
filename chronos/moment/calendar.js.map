{"version":3,"sources":["../../../.tmp/chronos/moment/calendar.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAC9B,OAAO,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAC5D,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAC5C,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChD,OAAO,EAAE,UAAU,EAAE,MAAM,WAAW,CAAC;AACvC,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAkB9C,MAAM,4BAA4B,IAAU,EAAE,GAAS,EAAE,MAAyB;IAChF,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IAEnD,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACb,KAAK,KAAK,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,UAAU,CAAC;QACnC,KAAK,KAAK,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,UAAU,CAAC;QACnC,KAAK,KAAK,GAAG,CAAC,EAAE,MAAM,CAAC,SAAS,CAAC;QACjC,KAAK,KAAK,GAAG,CAAC,EAAE,MAAM,CAAC,SAAS,CAAC;QACjC,KAAK,KAAK,GAAG,CAAC,EAAE,MAAM,CAAC,SAAS,CAAC;QACjC,KAAK,KAAK,GAAG,CAAC,EAAE,MAAM,CAAC,UAAU,CAAC;QAClC,SAAS,MAAM,CAAC,UAAU,CAAC;IAC7B,CAAC;AACH,CAAC;AAED,MAAM,mBAAmB,IAAU,EACV,IAAU,EACV,OAAqB,EACrB,MAA4B,EAC5B,MAA8B;IAD9B,uBAAA,EAAA,SAAiB,SAAS,EAAE;IAC5B,uBAAA,EAAA,WAA8B;IACrD,kDAAkD;IAClD,2EAA2E;IAC3E,IAAM,GAAG,GAAG,IAAI,CAAC;IACjB,IAAM,GAAG,GAAG,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,IAAI,EAAG,MAAM,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;IAC/E,IAAM,MAAM,GAAG,iBAAiB,CAAC,IAAI,EAAE,GAAG,EAAE,EAAC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,IAAI,UAAU,CAAC;IAEtF,IAAI,MAAM,CAAC;IACX,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACZ,IAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;QAChC,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,GAAG,OAAO,CAAC;QACnB,CAAC;QACD,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;QACzC,CAAC;IACH,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACZ,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;IACzD,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;AACvF,CAAC","file":"calendar.js","sourceRoot":"","sourcesContent":["import { diff } from './diff';\r\nimport { cloneWithOffset } from '../units/offset';\r\nimport { isFunction, isString } from '../utils/type-checks';\r\nimport { cloneDate } from '../create/clone';\r\nimport { startOf } from '../utils/start-end-of';\r\nimport { formatDate } from '../format';\r\nimport { getLocale } from '../locale/locales';\r\nimport { Locale } from '../locale/locale.class';\r\nimport { DateInput } from '../test/chain';\r\nimport { DateParsingConfig } from '../create/parsing.types';\r\n\r\nexport type CalendarSpecVal = string | ((m?: DateInput, now?: Date) => string);\r\nexport interface CalendarSpec {\r\n  sameDay?: CalendarSpecVal;\r\n  nextDay?: CalendarSpecVal;\r\n  lastDay?: CalendarSpecVal;\r\n  nextWeek?: CalendarSpecVal;\r\n  lastWeek?: CalendarSpecVal;\r\n  sameElse?: CalendarSpecVal;\r\n\r\n  // any additional properties might be used with moment.calendarFormat\r\n  [x: string]: CalendarSpecVal | void; // undefined\r\n}\r\n\r\nexport function getCalendarFormat(date: Date, now: Date, config: DateParsingConfig) {\r\n  const _diff = diff(date, now, 'day', true, config);\r\n\r\n  switch (true) {\r\n    case _diff < -6: return 'sameElse';\r\n    case _diff < -1: return 'lastWeek';\r\n    case _diff < 0: return 'lastDay';\r\n    case _diff < 1: return 'sameDay';\r\n    case _diff < 2: return 'nextDay';\r\n    case _diff < 7: return 'nextWeek';\r\n    default: return 'sameElse';\r\n  }\r\n}\r\n\r\nexport function calendar(date: Date,\r\n                         time: Date,\r\n                         formats: CalendarSpec,\r\n                         locale: Locale = getLocale(),\r\n                         config: DateParsingConfig = {}): string {\r\n  // We want to compare the start of today, vs this.\r\n  // Getting start-of-today depends on whether we're local/utc/offset or not.\r\n  const now = time;\r\n  const sod = startOf(cloneWithOffset(now, date,  config), 'day', config._isUTC);\r\n  const format = getCalendarFormat(date, sod, {_isUTC: true, _offset: 0}) || 'sameElse';\r\n\r\n  let output;\r\n  if (formats) {\r\n    const _format = formats[format];\r\n    if (isString(_format)) {\r\n      output = _format;\r\n    }\r\n    if (isFunction(_format)) {\r\n      output = _format.call(null, date, now);\r\n    }\r\n  }\r\n\r\n  if (!output) {\r\n    output = locale.calendar(format, date, cloneDate(now));\r\n  }\r\n\r\n  return formatDate(date, output, config._locale._abbr, config._isUTC, config._offset);\r\n}\r\n"]}