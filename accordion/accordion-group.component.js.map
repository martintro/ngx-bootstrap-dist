{"version":3,"sources":["../../.tmp/accordion/accordion-group.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EAAE,WAAA,EAAa,MAAA,EAAQ,KAAA,EAA0B,MAAA,EAAQ,YAAA,EACnE,MAAM,eAAA,CAAgB;AACvB,OAAO,EAAE,KAAA,EAAM,MAAO,yBAAA,CAA0B;AAChD,OAAO,EAAE,kBAAA,EAAmB,MAAO,uBAAA,CAAwB;AAE3D;;;;;GAKG;AAEH;IAyCE,iCAAa,SAA6B;QA9B1C,0CAA0C;QACzC,iBAAY,GAA0B,IAAI,YAAY,EAAE,CAAC;QA0BhD,YAAO,GAAG,KAAK,CAAC;QAIxB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAzBD,sBAAI,2CAAM;QAJV,wEAAwE;QACxE,gFAAgF;aAGhF;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC;aAED,UAAW,KAAc;YAAzB,iBAUC;YATC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC1B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACV,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBACxC,CAAC;gBACD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;oBACzB,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAChC,CAAC,CAAC,CAAC;YACL,CAAC;QACH,CAAC;;;OAZA;IAcD,sBAAI,0CAAK;aAAT;YACE,MAAM,CAAC,KAAK,EAAE,CAAC;QACjB,CAAC;;;OAAA;IASD,0CAAQ,GAAR;QACE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,IAAI,eAAe,CAAC;QACrD,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,6CAAW,GAAX;QACE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,4CAAU,GAAV,UAAW,KAAY;QACrB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;QAC7B,CAAC;IACH,CAAC;IACI,kCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,kCAAkC;oBAC5C,QAAQ,EAAE,6kBAA6kB;oBACvlB,IAAI,EAAE;wBACJ,KAAK,EAAE,OAAO;wBACd,KAAK,EAAE,gBAAgB;qBACxB;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,sCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,kBAAkB,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,kBAAkB,EAAG,EAAE,EAAG,EAAC;KACzF,EAF6F,CAE7F,CAAC;IACK,sCAAc,GAA2C;QAChE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC7B,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAChC,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAChC,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;QACnC,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,kBAAkB,EAAG,EAAE,EAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KAC/E,CAAC;IACF,8BAAC;CAhFD,AAgFC,IAAA;SAhFY,uBAAuB","file":"accordion-group.component.js","sourceRoot":"","sourcesContent":["import {\r\n  Component, HostBinding, Inject, Input, OnDestroy, OnInit, Output, EventEmitter\r\n} from '@angular/core';\r\nimport { isBs3 } from '../utils/theme-provider';\r\nimport { AccordionComponent } from './accordion.component';\r\n\r\n/**\r\n * ### Accordion heading\r\n * Instead of using `heading` attribute on the `accordion-group`, you can use\r\n * an `accordion-heading` attribute on `any` element inside of a group that\r\n * will be used as group's header template.\r\n */\r\n\r\nexport class AccordionPanelComponent implements OnInit, OnDestroy {\r\n  /** Clickable text in accordion's group header, check `accordion heading` below for using html in header */\r\n   heading: string;\r\n  /** Provides an ability to use Bootstrap's contextual panel classes\r\n   * (`panel-primary`, `panel-success`, `panel-info`, etc...).\r\n   * List of all available classes [available here]\r\n   * (https://getbootstrap.com/docs/3.3/components/#panels-alternatives)\r\n   */\r\n   panelClass: string;\r\n  /** if <code>true</code> â€” disables accordion group */\r\n   isDisabled: boolean;\r\n  /** Emits when the opened state changes */\r\n   isOpenChange: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  // Questionable, maybe .panel-open should be on child div.panel element?\r\n  /** Is accordion group open or closed. This property supports two-way binding */\r\n  \r\n  \r\n  get isOpen(): boolean {\r\n    return this._isOpen;\r\n  }\r\n\r\n  set isOpen(value: boolean) {\r\n    if (value !== this.isOpen) {\r\n      if (value) {\r\n        this.accordion.closeOtherPanels(this);\r\n      }\r\n      this._isOpen = value;\r\n      Promise.resolve(null).then(() => {\r\n        this.isOpenChange.emit(value);\r\n      });\r\n    }\r\n  }\r\n\r\n  get isBs3(): boolean {\r\n    return isBs3();\r\n  }\r\n\r\n  protected _isOpen = false;\r\n  protected accordion: AccordionComponent;\r\n\r\n  constructor( accordion: AccordionComponent) {\r\n    this.accordion = accordion;\r\n  }\r\n\r\n  ngOnInit(): any {\r\n    this.panelClass = this.panelClass || 'panel-default';\r\n    this.accordion.addGroup(this);\r\n  }\r\n\r\n  ngOnDestroy(): any {\r\n    this.accordion.removeGroup(this);\r\n  }\r\n\r\n  toggleOpen(event: Event): any {\r\n    if (!this.isDisabled) {\r\n      this.isOpen = !this.isOpen;\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'accordion-group, accordion-panel',\r\n  template: \"<div class=\\\"panel card\\\" [ngClass]=\\\"panelClass\\\"> <div class=\\\"panel-heading card-header\\\" role=\\\"tab\\\" (click)=\\\"toggleOpen($event)\\\"> <div class=\\\"panel-title\\\"> <div role=\\\"button\\\" class=\\\"accordion-toggle\\\" [attr.aria-expanded]=\\\"isOpen\\\"> <div *ngIf=\\\"heading\\\" [ngClass]=\\\"{'text-muted': isDisabled}\\\"> {{ heading }} </div> <ng-content select=\\\"[accordion-heading]\\\"></ng-content> </div> </div> </div> <div class=\\\"panel-collapse collapse\\\" role=\\\"tabpanel\\\" [collapse]=\\\"!isOpen\\\"> <div class=\\\"panel-body card-block card-body\\\"> <ng-content></ng-content> </div> </div> </div> \",\r\n  host: {\r\n    class: 'panel',\r\n    style: 'display: block'\r\n  }\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AccordionComponent, decorators: [{ type: Inject, args: [AccordionComponent, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'heading': [{ type: Input },],\n'panelClass': [{ type: Input },],\n'isDisabled': [{ type: Input },],\n'isOpenChange': [{ type: Output },],\n'isOpen': [{ type: HostBinding, args: ['class.panel-open', ] },{ type: Input },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}