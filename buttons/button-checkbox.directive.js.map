{"version":3,"sources":["../../.tmp/buttons/button-checkbox.directive.ts"],"names":[],"mappings":"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","file":"button-checkbox.directive.js","sourceRoot":"","sourcesContent":["// tslint:disable:no-use-before-declare\r\nimport {\r\n  Directive,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnInit,\r\n  forwardRef\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n// TODO: config: activeClass - Class to apply to the checked buttons\r\n\r\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Add checkbox functionality to any element\r\n */\r\n\r\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\r\n  /** Truthy value, will be set to ngModel */\r\n   btnCheckboxTrue: any = true;\r\n  /** Falsy value, will be set to ngModel */\r\n   btnCheckboxFalse: any = false;\r\n\r\n   state = false;\r\n\r\n  protected value: any;\r\n  protected isDisabled: boolean;\r\n\r\n  protected onChange: any = Function.prototype;\r\n  protected onTouched: any = Function.prototype;\r\n\r\n  // view -> model\r\n  \r\n  onClick(): void {\r\n    if (this.isDisabled) {\r\n      return;\r\n    }\r\n\r\n    this.toggle(!this.state);\r\n    this.onChange(this.value);\r\n  }\r\n\r\n  ngOnInit(): any {\r\n    this.toggle(this.trueValue === this.value);\r\n  }\r\n\r\n  protected get trueValue(): boolean {\r\n    return typeof this.btnCheckboxTrue !== 'undefined'\r\n      ? this.btnCheckboxTrue\r\n      : true;\r\n  }\r\n\r\n  protected get falseValue(): boolean {\r\n    return typeof this.btnCheckboxFalse !== 'undefined'\r\n      ? this.btnCheckboxFalse\r\n      : false;\r\n  }\r\n\r\n  toggle(state: boolean): void {\r\n    this.state = state;\r\n    this.value = this.state ? this.trueValue : this.falseValue;\r\n  }\r\n\r\n  // ControlValueAccessor\r\n  // model -> view\r\n  writeValue(value: any): void {\r\n    this.state = this.trueValue === value;\r\n    this.value = value ? this.trueValue : this.falseValue;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.isDisabled = isDisabled;\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[btnCheckbox]',\r\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'btnCheckboxTrue': [{ type: Input },],\n'btnCheckboxFalse': [{ type: Input },],\n'state': [{ type: HostBinding, args: ['class.active', ] },],\n'onClick': [{ type: HostListener, args: ['click', ] },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}