{"version":3,"sources":["../../.tmp/progressbar/progressbar.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,WAAA,EAAa,KAAA,EAAM,MAAO,eAAA,CAAgB;AAC9D,OAAO,EAAE,iBAAA,EAAkB,MAAO,sBAAA,CAAuB;AACzD,OAAO,EAAE,KAAA,EAAM,MAAO,gBAAA,CAAiB;AAIvC;IAyCE,8BAAY,MAAyB;QA1BrC,cAAS,GAAG,KAAK,CAAC;QAoBjB,aAAQ,GAAG,IAAI,CAAC;QAEjB,SAAI,GAAU,EAAE,CAAC;QAEP,SAAI,GAAG,GAAG,CAAC;QAGnB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC9B,CAAC;IAhCD,sBAAI,uCAAK;QAJT;;WAEG;aAEH,UAAU,KAAqB;YAC7B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACtC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACtB,CAAC;;;OAAA;IAGD,sBAAI,uCAAK;aAAT;YACE,MAAM,CAAC,KAAK,EAAE,CAAC;QACjB,CAAC;;;OAAA;IAKD,sBAAI,qCAAG;QAHP,8CAA8C;aAG9C;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;aAED,UAAQ,CAAS;YACf,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;YACd,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,GAAiB;gBAClC,GAAG,CAAC,qBAAqB,EAAE,CAAC;YAC9B,CAAC,CAAC,CAAC;QACL,CAAC;;;OAPA;IAkBD,qCAAM,GAAN,UAAO,GAAiB;QACtB,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC3B,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAE3B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC;IAED,wCAAS,GAAT,UAAU,GAAiB;QACzB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC;IACI,+BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,aAAa;oBACvB,QAAQ,EAAE,yPAAyP;oBACnQ,MAAM,EAAE;wBACN,oEAKD;qBACA;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,mCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,iBAAiB,GAAG;KAC1B,EAF6F,CAE7F,CAAC;IACK,mCAAc,GAA2C;QAChE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC7B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC7B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC3B,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,UAAU,EAAG,EAAE,EAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACrE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAG,EAAE,EAAE;KAC/D,CAAC;IACF,2BAAC;CAhFD,AAgFC,IAAA;SAhFY,oBAAoB","file":"progressbar.component.js","sourceRoot":"","sourcesContent":["import { Component, HostBinding, Input } from '@angular/core';\r\nimport { ProgressbarConfig } from './progressbar.config';\r\nimport { isBs3 } from '../utils/index';\r\nimport { BarComponent } from './bar.component';\r\n\r\n\r\nexport class ProgressbarComponent {\r\n  /** if `true` changing value of progress bar will be animated*/\r\n   animate: boolean;\r\n  /** If `true`, striped classes are applied */\r\n   striped: boolean;\r\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\r\n   type: string;\r\n  /** current value of progress bar. Could be a number or array of objects\r\n   * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\r\n   */\r\n  \r\n  set value(value: number | any[]) {\r\n    this.isStacked = Array.isArray(value);\r\n    this._value = value;\r\n  }\r\n  isStacked = false;\r\n  _value: number | any[];\r\n  get isBs3(): boolean {\r\n    return isBs3();\r\n  }\r\n\r\n  /** maximum total value of progress element */\r\n  \r\n  \r\n  get max(): number {\r\n    return this._max;\r\n  }\r\n\r\n  set max(v: number) {\r\n    this._max = v;\r\n    this.bars.forEach((bar: BarComponent) => {\r\n      bar.recalculatePercentage();\r\n    });\r\n  }\r\n\r\n   addClass = true;\r\n\r\n  bars: any[] = [];\r\n\r\n  protected _max = 100;\r\n\r\n  constructor(config: ProgressbarConfig) {\r\n    Object.assign(this, config);\r\n  }\r\n  addBar(bar: BarComponent): void {\r\n    bar.animate = this.animate;\r\n    bar.striped = this.striped;\r\n\r\n    this.bars.push(bar);\r\n  }\r\n\r\n  removeBar(bar: BarComponent): void {\r\n    this.bars.splice(this.bars.indexOf(bar), 1);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'progressbar',\r\n  template: \"<bar [type]=\\\"type\\\" [value]=\\\"_value\\\" *ngIf=\\\"!isStacked\\\"> <ng-content></ng-content> </bar> <ng-template [ngIf]=\\\"isStacked\\\"> <bar *ngFor=\\\"let item of _value\\\" [type]=\\\"item.type\\\" [value]=\\\"item.value\\\">{{ item.label }}</bar> </ng-template> \",\r\n  styles: [\r\n    `\r\n    :host {\r\n      width: 100%;\r\n      display: flex;\r\n    }\r\n  `\r\n  ]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ProgressbarConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'animate': [{ type: Input },],\n'striped': [{ type: Input },],\n'type': [{ type: Input },],\n'value': [{ type: Input },],\n'max': [{ type: HostBinding, args: ['attr.max', ] },{ type: Input },],\n'addClass': [{ type: HostBinding, args: ['class.progress', ] },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}