{"version":3,"sources":["../../.tmp/carousel/carousel.component.ts"],"names":[],"mappings":"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","file":"carousel.component.js","sourceRoot":"","sourcesContent":["// tslint:disable:max-file-line-count\r\n/***\r\n * pause (not yet supported) (?string='hover') - event group name which pauses\r\n * the cycling of the carousel, if hover pauses on mouseenter and resumes on\r\n * mouseleave keyboard (not yet supported) (?boolean=true) - if false\r\n * carousel will not react to keyboard events\r\n * note: swiping not yet supported\r\n */\r\n/****\r\n * Problems:\r\n * 1) if we set an active slide via model changes, .active class remains on a\r\n * current slide.\r\n * 2) if we have only one slide, we shouldn't show prev/next nav buttons\r\n * 3) if first or last slide is active and noWrap is true, there should be\r\n * \"disabled\" class on the nav buttons.\r\n * 4) default interval should be equal 5000\r\n */\r\n\r\nimport {\r\n  Component, EventEmitter, Input, NgZone, OnDestroy, Output\r\n} from '@angular/core';\r\n\r\nimport { isBs3, LinkedList } from '../utils/index';\r\nimport { SlideComponent } from './slide.component';\r\nimport { CarouselConfig } from './carousel.config';\r\n\r\nexport enum Direction {\r\n  UNKNOWN,\r\n  NEXT,\r\n  PREV\r\n}\r\n\r\n/**\r\n * Base element to create carousel\r\n */\r\n\r\nexport class CarouselComponent implements OnDestroy {\r\n  /** If `true` — carousel will not cycle continuously and will have hard stops (prevent looping) */\r\n   noWrap: boolean;\r\n  /**  If `true` — will disable pausing on carousel mouse hover */\r\n   noPause: boolean;\r\n  /**  If `true` — carousel-indicators are visible  */\r\n   showIndicators: boolean;\r\n\r\n  /** Will be emitted when active slide has been changed. Part of two-way-bindable [(activeSlide)] property */\r\n  \r\n  activeSlideChange: EventEmitter<any> = new EventEmitter<any>(false);\r\n\r\n  /** Index of currently displayed slide(started for 0) */\r\n  \r\n  set activeSlide(index: number) {\r\n    if (this._slides.length && index !== this._currentActiveSlide) {\r\n      this._select(index);\r\n    }\r\n  }\r\n\r\n  get activeSlide(): number {\r\n    return this._currentActiveSlide;\r\n  }\r\n\r\n  /**\r\n   * Delay of item cycling in milliseconds. If false, carousel won't cycle\r\n   * automatically.\r\n   */\r\n  \r\n  get interval(): number {\r\n    return this._interval;\r\n  }\r\n\r\n  set interval(value: number) {\r\n    this._interval = value;\r\n    this.restartTimer();\r\n  }\r\n\r\n  get slides(): SlideComponent[] {\r\n    return this._slides.toArray();\r\n  }\r\n\r\n  protected _currentActiveSlide: number;\r\n  protected _interval: number;\r\n  protected _slides: LinkedList<SlideComponent> = new LinkedList<SlideComponent>();\r\n  protected currentInterval: any;\r\n  protected isPlaying: boolean;\r\n  protected destroyed = false;\r\n\r\n  get isBs4(): boolean {\r\n    return !isBs3();\r\n  }\r\n\r\n  constructor(config: CarouselConfig, private ngZone: NgZone) {\r\n    Object.assign(this, config);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyed = true;\r\n  }\r\n\r\n  /**\r\n   * Adds new slide. If this slide is first in collection - set it as active\r\n   * and starts auto changing\r\n   * @param slide\r\n   */\r\n  addSlide(slide: SlideComponent): void {\r\n    this._slides.add(slide);\r\n    if (this._slides.length === 1) {\r\n      this._currentActiveSlide = void 0;\r\n      this.activeSlide = 0;\r\n      this.play();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes specified slide. If this slide is active - will roll to another\r\n   * slide\r\n   * @param slide\r\n   */\r\n  removeSlide(slide: SlideComponent): void {\r\n    const remIndex = this._slides.indexOf(slide);\r\n\r\n    if (this._currentActiveSlide === remIndex) {\r\n      // removing of active slide\r\n      let nextSlideIndex: number = void 0;\r\n      if (this._slides.length > 1) {\r\n        // if this slide last - will roll to first slide, if noWrap flag is\r\n        // FALSE or to previous, if noWrap is TRUE in case, if this slide in\r\n        // middle of collection, index of next slide is same to removed\r\n        nextSlideIndex = !this.isLast(remIndex)\r\n          ? remIndex\r\n          : this.noWrap ? remIndex - 1 : 0;\r\n      }\r\n      this._slides.remove(remIndex);\r\n\r\n      // prevents exception with changing some value after checking\r\n      setTimeout(() => {\r\n        this._select(nextSlideIndex);\r\n      }, 0);\r\n    } else {\r\n      this._slides.remove(remIndex);\r\n      const currentSlideIndex = this.getCurrentSlideIndex();\r\n      setTimeout(() => {\r\n        // after removing, need to actualize index of current active slide\r\n        this._currentActiveSlide = currentSlideIndex;\r\n        this.activeSlideChange.emit(this._currentActiveSlide);\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rolling to next slide\r\n   * @param force: {boolean} if true - will ignore noWrap flag\r\n   */\r\n  nextSlide(force = false): void {\r\n    this.activeSlide = this.findNextSlideIndex(Direction.NEXT, force);\r\n  }\r\n\r\n  /**\r\n   * Rolling to previous slide\r\n   * @param force: {boolean} if true - will ignore noWrap flag\r\n   */\r\n  previousSlide(force = false): void {\r\n    this.activeSlide = this.findNextSlideIndex(Direction.PREV, force);\r\n  }\r\n\r\n  /**\r\n   * Rolling to specified slide\r\n   * @param index: {number} index of slide, which must be shown\r\n   */\r\n  selectSlide(index: number): void {\r\n    this.activeSlide = index;\r\n  }\r\n\r\n  /**\r\n   * Starts a auto changing of slides\r\n   */\r\n  play(): void {\r\n    if (!this.isPlaying) {\r\n      this.isPlaying = true;\r\n      this.restartTimer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stops a auto changing of slides\r\n   */\r\n  pause(): void {\r\n    if (!this.noPause) {\r\n      this.isPlaying = false;\r\n      this.resetTimer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds and returns index of currently displayed slide\r\n   * @returns {number}\r\n   */\r\n  getCurrentSlideIndex(): number {\r\n    return this._slides.findIndex((slide: SlideComponent) => slide.active);\r\n  }\r\n\r\n  /**\r\n   * Defines, whether the specified index is last in collection\r\n   * @param index\r\n   * @returns {boolean}\r\n   */\r\n  isLast(index: number): boolean {\r\n    return index + 1 >= this._slides.length;\r\n  }\r\n\r\n  /**\r\n   * Defines next slide index, depending of direction\r\n   * @param direction: Direction(UNKNOWN|PREV|NEXT)\r\n   * @param force: {boolean} if TRUE - will ignore noWrap flag, else will\r\n   *   return undefined if next slide require wrapping\r\n   * @returns {any}\r\n   */\r\n  private findNextSlideIndex(direction: Direction, force: boolean): number {\r\n    let nextSlideIndex = 0;\r\n\r\n    if (\r\n      !force &&\r\n      (this.isLast(this.activeSlide) &&\r\n        direction !== Direction.PREV &&\r\n        this.noWrap)\r\n    ) {\r\n      return void 0;\r\n    }\r\n\r\n    switch (direction) {\r\n      case Direction.NEXT:\r\n        // if this is last slide, not force, looping is disabled\r\n        // and need to going forward - select current slide, as a next\r\n        nextSlideIndex = !this.isLast(this._currentActiveSlide)\r\n          ? this._currentActiveSlide + 1\r\n          : !force && this.noWrap ? this._currentActiveSlide : 0;\r\n        break;\r\n      case Direction.PREV:\r\n        // if this is first slide, not force, looping is disabled\r\n        // and need to going backward - select current slide, as a next\r\n        nextSlideIndex =\r\n          this._currentActiveSlide > 0\r\n            ? this._currentActiveSlide - 1\r\n            : !force && this.noWrap\r\n            ? this._currentActiveSlide\r\n            : this._slides.length - 1;\r\n        break;\r\n      default:\r\n        throw new Error('Unknown direction');\r\n    }\r\n\r\n    return nextSlideIndex;\r\n  }\r\n\r\n  /**\r\n   * Sets a slide, which specified through index, as active\r\n   * @param index\r\n   * @private\r\n   */\r\n  private _select(index: number): void {\r\n    if (isNaN(index)) {\r\n      this.pause();\r\n\r\n      return;\r\n    }\r\n    const currentSlide = this._slides.get(this._currentActiveSlide);\r\n    if (currentSlide) {\r\n      currentSlide.active = false;\r\n    }\r\n    const nextSlide = this._slides.get(index);\r\n    if (nextSlide) {\r\n      this._currentActiveSlide = index;\r\n      nextSlide.active = true;\r\n      this.activeSlide = index;\r\n      this.activeSlideChange.emit(index);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts loop of auto changing of slides\r\n   */\r\n  private restartTimer(): any {\r\n    this.resetTimer();\r\n    const interval = +this.interval;\r\n    if (!isNaN(interval) && interval > 0) {\r\n      this.currentInterval = this.ngZone.runOutsideAngular(() => {\r\n        return setInterval(() => {\r\n          const nInterval = +this.interval;\r\n          this.ngZone.run(() => {\r\n            if (\r\n              this.isPlaying &&\r\n              !isNaN(this.interval) &&\r\n              nInterval > 0 &&\r\n              this.slides.length\r\n            ) {\r\n              this.nextSlide();\r\n            } else {\r\n              this.pause();\r\n            }\r\n          });\r\n        }, interval);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stops loop of auto changing of slides\r\n   */\r\n  private resetTimer(): void {\r\n    if (this.currentInterval) {\r\n      clearInterval(this.currentInterval);\r\n      this.currentInterval = void 0;\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'carousel',\r\n  template: \"<div (mouseenter)=\\\"pause()\\\" (mouseleave)=\\\"play()\\\" (mouseup)=\\\"play()\\\" class=\\\"carousel slide\\\"> <ol class=\\\"carousel-indicators\\\" *ngIf=\\\"showIndicators && slides.length > 1\\\"> <li *ngFor=\\\"let slidez of slides; let i = index;\\\" [class.active]=\\\"slidez.active === true\\\" (click)=\\\"selectSlide(i)\\\"></li> </ol> <div class=\\\"carousel-inner\\\"><ng-content></ng-content></div> <a class=\\\"left carousel-control carousel-control-prev\\\" [class.disabled]=\\\"activeSlide === 0 && noWrap\\\" (click)=\\\"previousSlide()\\\" *ngIf=\\\"slides.length > 1\\\"> <span class=\\\"icon-prev carousel-control-prev-icon\\\" aria-hidden=\\\"true\\\"></span> <span *ngIf=\\\"isBs4\\\" class=\\\"sr-only\\\">Previous</span> </a> <a class=\\\"right carousel-control carousel-control-next\\\" (click)=\\\"nextSlide()\\\"  [class.disabled]=\\\"isLast(activeSlide) && noWrap\\\" *ngIf=\\\"slides.length > 1\\\"> <span class=\\\"icon-next carousel-control-next-icon\\\" aria-hidden=\\\"true\\\"></span> <span class=\\\"sr-only\\\">Next</span> </a> </div> \"\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CarouselConfig, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'noWrap': [{ type: Input },],\n'noPause': [{ type: Input },],\n'showIndicators': [{ type: Input },],\n'activeSlideChange': [{ type: Output },],\n'activeSlide': [{ type: Input },],\n'interval': [{ type: Input },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}