{"version":3,"sources":["../../../../.tmp/datepicker/themes/bs/bs-years-calendar-view.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,YAAA,EAAc,KAAA,EAAO,MAAA,EAAO,MAAO,eAAA,CAAgB;AACvE,OAAO,EAAE,gBAAA,EAAiB,MAAO,oCAAA,CAAqC;AACtE,OAAO,EAEL,qBAAqB,EAKtB,MAAM,oBAAA,CAAqB;AAG5B;IAAA;QAGG,eAAU,GAAG,IAAI,YAAY,EAAqB,CAAC;QACnD,eAAU,GAAG,IAAI,YAAY,EAAwB,CAAC;QAEtD,aAAQ,GAAG,IAAI,YAAY,EAAyB,CAAC;QACrD,YAAO,GAAG,IAAI,YAAY,EAAkB,CAAC;IAyDhD,CAAC;IAvDC,iDAAU,GAAV,UAAW,KAA4B;QACrC,IAAM,IAAI,GAAG,qBAAqB,CAAC,IAAI,KAAK,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3D,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,GAAG,gBAAgB,EAAE,EAAE,CAAC,CAAC;IACpE,CAAC;IAED,+CAAQ,GAAR,UAAS,IAA2B;QAClC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED,gDAAS,GAAT,UAAU,IAA2B,EAAE,SAAkB;QACvD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,MAAA,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;IACzC,CAAC;IAED,qDAAc,GAAd,UAAe,KAA2B;QACxC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IACI,uCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,wBAAwB;oBAClC,QAAQ,EAAE,0yBAuBT;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,2CAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,2CAAc,GAA2C;QAChE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC9B,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;QACjC,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;QACjC,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;QAC/B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;KAC7B,CAAC;IACF,mCAAC;CAhED,AAgEC,IAAA;SAhEY,4BAA4B","file":"bs-years-calendar-view.component.js","sourceRoot":"","sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { yearsPerCalendar } from '../../engine/format-years-calendar';\r\nimport {\r\n  BsDatepickerViewMode,\r\n  BsNavigationDirection,\r\n  BsNavigationEvent,\r\n  CalendarCellViewModel,\r\n  CellHoverEvent,\r\n  YearsCalendarViewModel\r\n} from '../../models/index';\r\n\r\n\r\nexport class BsYearsCalendarViewComponent {\r\n   calendar: YearsCalendarViewModel;\r\n\r\n   onNavigate = new EventEmitter<BsNavigationEvent>();\r\n   onViewMode = new EventEmitter<BsDatepickerViewMode>();\r\n\r\n   onSelect = new EventEmitter<CalendarCellViewModel>();\r\n   onHover = new EventEmitter<CellHoverEvent>();\r\n\r\n  navigateTo(event: BsNavigationDirection): void {\r\n    const step = BsNavigationDirection.DOWN === event ? -1 : 1;\r\n    this.onNavigate.emit({ step: { year: step * yearsPerCalendar } });\r\n  }\r\n\r\n  viewYear(year: CalendarCellViewModel) {\r\n    this.onSelect.emit(year);\r\n  }\r\n\r\n  hoverYear(cell: CalendarCellViewModel, isHovered: boolean) {\r\n    this.onHover.emit({ cell, isHovered });\r\n  }\r\n\r\n  changeViewMode(event: BsDatepickerViewMode): void {\r\n    this.onViewMode.emit(event);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'bs-years-calendar-view',\r\n  template: `\r\n    <bs-calendar-layout>\r\n      <bs-datepicker-navigation-view\r\n        [calendar]=\"calendar\"\r\n        (onNavigate)=\"navigateTo($event)\"\r\n        (onViewMode)=\"changeViewMode($event)\"\r\n      ></bs-datepicker-navigation-view>\r\n\r\n      <table role=\"grid\" class=\"years\">\r\n        <tbody>\r\n        <tr *ngFor=\"let row of calendar.years\">\r\n          <td *ngFor=\"let year of row\" role=\"gridcell\"\r\n              (click)=\"viewYear(year)\"\r\n              (mouseenter)=\"hoverYear(year, true)\"\r\n              (mouseleave)=\"hoverYear(year, false)\"\r\n              [class.disabled]=\"year.isDisabled\"\r\n              [class.is-highlighted]=\"year.isHovered\">\r\n            <span>{{ year.label }}</span>\r\n          </td>\r\n        </tr>\r\n        </tbody>\r\n      </table>\r\n    </bs-calendar-layout>\r\n  `\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'calendar': [{ type: Input },],\n'onNavigate': [{ type: Output },],\n'onViewMode': [{ type: Output },],\n'onSelect': [{ type: Output },],\n'onHover': [{ type: Output },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}