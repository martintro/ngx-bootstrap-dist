{"version":3,"sources":["../../../.tmp/datepicker/utils/bs-calendar-utils.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,MAAM,EACN,gBAAgB,EACjB,MAAM,kCAAkC,CAAC;AAC1C,OAAO,EAAE,SAAS,EAAE,MAAM,kCAAkC,CAAC;AAC7D,OAAO,EACL,OAAO,EACP,QAAQ,EACT,MAAM,kCAAkC,CAAC;AAC1C,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,kCAAkC,CAAC;AAElE,MAAM,mCAAmC,IAAU,EACV,OAAoC;IAC3E,EAAE,CAAC,CAAC,gBAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QACnD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,IAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IAC7B,IAAM,MAAM,GAAG,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC;IAEpE,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,EAAC,GAAG,EAAE,CAAC,MAAM,EAAC,CAAC,CAAC;AACzC,CAAC;AAED,MAAM,8BAA8B,OAAe,EAAE,iBAAyB;IAC5E,EAAE,CAAC,CAAC,iBAAiB,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5B,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IAED,IAAM,MAAM,GAAG,OAAO,GAAG,iBAAiB,GAAG,CAAC,CAAC;IAE/C,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,GAAG,MAAM,CAAC;AAC1C,CAAC;AAED,MAAM,0BAA0B,IAAU,EAAE,GAAS,EAAE,GAAS;IAC9D,IAAM,QAAQ,GAAG,GAAG,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IACnE,IAAM,QAAQ,GAAG,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IAEpE,MAAM,CAAC,QAAQ,IAAI,QAAQ,CAAC;AAC9B,CAAC;AAED,MAAM,yBAAyB,IAAU,EAAE,GAAS,EAAE,GAAS;IAC7D,IAAM,QAAQ,GAAG,GAAG,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IAClE,IAAM,QAAQ,GAAG,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IAEnE,MAAM,CAAC,QAAQ,IAAI,QAAQ,CAAC;AAC9B,CAAC","file":"bs-calendar-utils.js","sourceRoot":"","sourcesContent":["import {\r\n  getDay,\r\n  isFirstDayOfWeek\r\n} from '../../chronos/utils/date-getters';\r\nimport { shiftDate } from '../../chronos/utils/date-setters';\r\nimport {\r\n  isAfter,\r\n  isBefore\r\n} from '../../chronos/utils/date-compare';\r\nimport { endOf, startOf } from '../../chronos/utils/start-end-of';\r\n\r\nexport function getStartingDayOfCalendar(date: Date,\r\n                                         options: { firstDayOfWeek?: number }): Date {\r\n  if (isFirstDayOfWeek(date, options.firstDayOfWeek)) {\r\n    return date;\r\n  }\r\n\r\n  const weekDay = getDay(date);\r\n  const offset = calculateDateOffset(weekDay, options.firstDayOfWeek);\r\n\r\n  return shiftDate(date, {day: -offset});\r\n}\r\n\r\nexport function calculateDateOffset(weekday: number, startingDayOffset: number): number {\r\n  if (startingDayOffset === 0) {\r\n    return weekday;\r\n  }\r\n\r\n  const offset = weekday - startingDayOffset % 7;\r\n\r\n  return offset < 0 ? offset + 7 : offset;\r\n}\r\n\r\nexport function isMonthDisabled(date: Date, min: Date, max: Date): boolean {\r\n  const minBound = min && isBefore(endOf(date, 'month'), min, 'day');\r\n  const maxBound = max && isAfter(startOf(date, 'month'), max, 'day');\r\n\r\n  return minBound || maxBound;\r\n}\r\n\r\nexport function isYearDisabled(date: Date, min: Date, max: Date): boolean {\r\n  const minBound = min && isBefore(endOf(date, 'year'), min, 'day');\r\n  const maxBound = max && isAfter(startOf(date, 'year'), max, 'day');\r\n\r\n  return minBound || maxBound;\r\n}\r\n"]}